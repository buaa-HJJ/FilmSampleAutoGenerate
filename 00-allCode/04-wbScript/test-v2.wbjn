# encoding: utf-8
# 2020 R2
SetScriptVersion(Version="20.2.221")

# API
# modelPath = r"D:\FILES\Project\20220227 FilmSampleAutoGenerate\01-model\0.56-28.59-8.16-4.34-1.05-1.11.prt"
# exportPath = r"D:\FILES\Project\20220227\06" 

dataPath = r"D:\FILES\Project\20220227 FilmSampleAutoGenerate\00-DataDesign\lhsData.csv"
ScScriptPath = r"D:\FILES\Project\20220227 FilmSampleAutoGenerate\02-spaceClaim\NSAutoCreate.txt"
FluScriptPath = r"D:\FILES\Project\20220227 FilmSampleAutoGenerate\03-Fluent\00-FluScript\FluentBCSet.txt"

# spaceClaim
def spaceClaim(ScScriptPath, modelPath):
    with open(ScScriptPath,"r") as f:
        lines = f.readlines()

        fields = lines[4].split('\"')
        fields[1] = modelPath    #传入模型地址
        lines[4] = '\"'.join(fields)

    with open(ScScriptPath,"w") as f:
        f.writelines(lines)

    system1 = GetSystem(Name="Geom")
    geometryComponent1 = system1.GetComponent(Name="Geometry")
    geometryComponent1.Reset()
    geometry1 = system1.GetContainer(ComponentName="Geometry")
    geometry1.Edit(IsSpaceClaimGeometry=True)

    with open(ScScriptPath,"r") as f:
        ScScript = f.read()  
    print(ScScript)
    geometry1.SendCommand(Language="Python", Command=ScScript)
    geometry1.Exit()
 

# Fluent
def fluent(FluScriptPath, exportPath, Df, S, BR, inletMm, inletTm, inletTc):
    with open(FluScriptPath,"r") as f:
        lines = f.readlines()

        fields = lines[1].split('\"')
        fields[3] = str(Df)
        lines[1] = '\"'.join(fields)

        fields = lines[2].split('\"')
        fields[3] = str(S)
        lines[2] = '\"'.join(fields)

        fields = lines[3].split('\"')
        fields[3] = str(BR)
        lines[3] = '\"'.join(fields)

        fields = lines[4].split('\"')
        fields[3] = str(inletMm)+" [kg s^-1]"
        lines[4] = '\"'.join(fields)

        fields = lines[5].split('\"')
        fields[3] = str(inletTm)+"[K]"
        lines[5] = '\"'.join(fields)

        fields = lines[6].split('\"')
        fields[3] = str(inletTc)+"[K]"
        lines[6] = '\"'.join(fields)

        fields = lines[9].split('\"')
        fields[1] = exportPath    #传入cas导出地址
        lines[9] = '\"'.join(fields)

    with open(FluScriptPath,"w") as f:
        f.writelines(lines)

    system1 = GetSystem(Name="FLTG")
    meshComponent1 = system1.GetComponent(Name="Mesh")
    meshComponent1.Update(AllDependencies=True)
    setup1 = system1.GetContainer(ComponentName="Setup")
    flu_opt = setup1.GetFluentLauncherSettings()
    flu_opt.RunParallel = True
    flu_opt.NumberOfProcessors = 2
    flu_opt.Precision = "Double"
    setup1.Refresh()
    setup1.Edit()

    with open(FluScriptPath,"r") as f:
        FLUscript = f.read()

    setup1.SendCommand(FLUscript)
    geometry1.Exit()


# main

#import data
with open(dataPath,"r") as f:
    lines = f.readlines()

flag = 1
for line in lines:
    num = line.split(',') 
    modelID = num[0] + "-" + num[1] + "-" + num[2] + "-" + num[3] + "-" + num[4] + "-" + num[5]
    modelPath = "D:/FILES/Project/20220227 FilmSampleAutoGenerate/01-model/" + modelID + ".prt"
    exportPath = "D:/FILES/Project/20220227/" + str(flag) + "-" + modelID 
    modelPath = modelPath.replace('\n', '')
    exportPath = exportPath.replace('\n', '')

    Df = float(num[0])
    S = float(num[2])
    BR = 0.75
    inletMm = 3.5e-4
    inletTm = 1700
    inletTc = 1050

    flag = flag + 1

    print(modelPath)
    print(exportPath) 
    print(Df) 
    print(S) 

    #spaceClaim(ScScriptPath, modelPath)
    #fluent(FluScriptPath, exportPath, Df, S, BR, inletMm, inletTm, inletTc)
